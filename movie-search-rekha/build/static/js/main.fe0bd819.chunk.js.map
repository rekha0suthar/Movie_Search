{"version":3,"sources":["components/Search.js","components/Result.js","components/Results.js","components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","openPopup","onClick","imdbID","src","Poster","Title","Results","results","map","key","error","Popup","selected","closePopup","Year","imdbRating","Plot","App","useState","s","state","setState","apiurl","console","log","e","target","value","prevState","axios","then","data","undefined","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+OAgBeA,MAdf,YAA2C,IAAxBC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,OAC/B,OACC,6BAASC,UAAU,kBAClB,2BACCC,KAAK,OACLC,YAAY,wBACZF,UAAU,YACVG,SAAUL,EACVM,WAAYL,MCGDM,MAXf,YAAwC,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UAGzB,OACC,yBAAKP,UAAU,SAASQ,QAAS,kBAAMD,EAAUD,EAAOG,UACvD,yBAAKC,IAAKJ,EAAOK,SACjB,4BAAKL,EAAOM,SCQAC,MAZf,YAA2C,IAAvBC,EAAsB,EAAtBA,QAASP,EAAa,EAAbA,UAG5B,OACC,6BAASP,UAAU,WACjBc,EAAQC,KAAI,SAAAT,GAAM,OAClB,kBAAC,EAAD,CAAQU,IAAKV,EAAOG,OAASQ,MAAOX,EAAOW,MAAOX,OAAQA,EAAQC,UAAWA,SCQlEW,MAhBf,YAA0C,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAC1B,OACC,6BAASpB,UAAU,SAClB,yBAAKA,UAAU,WACd,4BAAMmB,EAASP,MAAf,IAAuB,kCAASO,EAASE,KAAlB,MACvB,uBAAGrB,UAAU,UAAb,WAA+BmB,EAASG,YACxC,yBAAKtB,UAAU,QACd,yBAAKU,IAAKS,EAASR,SACnB,2BAAIQ,EAASI,OAEd,4BAAQvB,UAAU,QAAQQ,QAASY,GAAnC,Y,MC4DWI,MAlEf,WAAgB,IAAD,EACaC,mBAAS,CACjCC,EAAG,GACHZ,QAAS,GACTK,SAAU,KAJC,mBACNQ,EADM,KACCC,EADD,KAMPC,EAAS,0CA0Cf,OADFC,QAAQC,IAAIJ,EAAMb,SAEd,yBAAKd,UAAU,OACb,gCACE,6CAEF,8BACA,kBAAC,EAAD,CAAQF,YAhCQ,SAACkC,GACnB,IAAIN,EAAIM,EAAEC,OAAOC,MAEjBN,GAAS,SAAAO,GACP,OAAO,eAAKA,EAAZ,CAAuBT,EAAGA,QA4BQ3B,OA9CvB,SAACiC,GACA,UAAVA,EAAEhB,KACJoB,IAAMP,EAAS,MAAQF,EAAMD,GAAGW,MAAK,YAAe,IAC9CvB,EAD6C,EAAXwB,KACnBzC,OACnBiC,QAAQC,IAAIjB,GAEZgB,QAAQC,IAAIjB,GACZc,GAAS,SAAAO,GACP,OAAO,eAAKA,EAAZ,CAAuBrB,QAASA,kBAuClByB,GAAjBZ,EAAMb,QAAqB,kBAAC,EAAD,CAASA,QAASa,EAAMb,QAASP,UAzB/C,SAAAiC,GAChBJ,IAAMP,EAAS,MAAQW,GAAIH,MAAK,YAAe,IACzC/B,EADwC,EAAXgC,KAGjCR,QAAQC,IAAIzB,GAEZsB,GAAS,SAAAO,GACP,OAAO,eAAKA,EAAZ,CAAuBhB,SAAUb,aAkBmD,+CAKnD,oBAAxBqB,EAAMR,SAASP,OAAwB,kBAAC,EAAD,CAAOO,SAAUQ,EAAMR,SAAUC,WAlBpE,WACjBQ,GAAS,SAAAO,GACP,OAAO,eAAKA,EAAZ,CAAuBhB,SAAU,cCtCnBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,MAAK,SAAAgB,GACjCA,EAAaC,kB","file":"static/js/main.fe0bd819.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Search ({ handleInput, search }) {\n\treturn (\n\t\t<section className=\"searchbox-wrap\">\n\t\t\t<input \n\t\t\t\ttype=\"text\" \n\t\t\t\tplaceholder=\"Search for a movie...\" \n\t\t\t\tclassName=\"searchbox\" \n\t\t\t\tonChange={handleInput}\n\t\t\t\tonKeyPress={search}\n\t\t\t/>\n\t\t</section>\n\t)\n}\n\nexport default Search\n","import React from 'react'\n\nfunction Result({ result, openPopup }) {\n\t\n\n\treturn (\n\t\t<div className=\"result\" onClick={() => openPopup(result.imdbID)}>\n\t\t\t<img src={result.Poster} />\n\t\t\t<h3>{result.Title}</h3>\n\t\t</div>\n\t)\n}\n\nexport default Result\n","import React from 'react'\n\nimport Result from './Result'\n\nfunction Results ({ results, openPopup }) {\n\t\n\t\n\treturn (\n\t\t<section className=\"results\">\n\t\t\t{results.map(result => (\n\t\t\t <Result key={result.imdbID}  error={result.error} result={result} openPopup={openPopup} />\n\t\t))}\n\t\t</section>\n\t)\n}\n\nexport default Results\n","import React from 'react'\n\nfunction Popup({ selected, closePopup }) {\n\treturn (\n\t\t<section className=\"popup\">\n\t\t\t<div className=\"content\">\n\t\t\t\t<h2>{ selected.Title } <span>({ selected.Year })</span></h2>\n\t\t\t\t<p className=\"rating\">Rating: {selected.imdbRating}</p>\n\t\t\t\t<div className=\"plot\">\n\t\t\t\t\t<img src={selected.Poster} />\n\t\t\t\t\t<p>{selected.Plot}</p>\n\t\t\t\t</div>\n\t\t\t\t<button className=\"close\" onClick={closePopup}>Close</button>\n\t\t\t</div>\n\t\t</section>\n\t)\n}\n\nexport default Popup\n","import React, { useState } from 'react'\nimport axios from 'axios'\nimport Search from './components/Search'\nimport Results from './components/Results'\nimport Popup from './components/Popup'\nimport Overlay from './components/overlay'\nfunction App() {\n  const [state, setState] = useState({\n    s: \"\",\n    results: [],\n    selected: {}\n  });\n  const apiurl = \"http://www.omdbapi.com/?apikey=dfe6d885\";\n\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      axios(apiurl + \"&s=\" + state.s).then(({ data }) => {\n        let results = data.Search;\n        console.log(results)\n        \n        console.log(results)\n        setState(prevState => {\n          return { ...prevState, results: results }\n        })\n      });\n    }\n  }\n  \n  const handleInput = (e) => {\n    let s = e.target.value;\n\n    setState(prevState => {\n      return { ...prevState, s: s }\n    });\n  }\n\n  const openPopup = id => {\n    axios(apiurl + \"&i=\" + id).then(({ data }) => {\n      let result = data;\n\n      console.log(result);\n\n      setState(prevState => {\n        return { ...prevState, selected: result }\n      });\n    });\n  }\n\n  const closePopup = () => {\n    setState(prevState => {\n      return { ...prevState, selected: {} }\n    });\n  }\nconsole.log(state.results)\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Movie search</h1>\n      </header>\n      <main>\n      <Search handleInput={handleInput} search={search} />\n      {state.results != undefined?<Results results={state.results} openPopup={openPopup} />:<h1>Movie not found</h1>}\n        \n\n        \n\n        {(typeof state.selected.Title != \"undefined\") ? <Popup selected={state.selected} closePopup={closePopup} /> : false}\n      </main>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}